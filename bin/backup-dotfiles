#!/usr/bin/env bash
# ============================================================================
# Standalone backup script for dotfiles and configurations
# ============================================================================

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Backup settings
TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
BACKUP_NAME="${1:-dotfiles-backup}"
BACKUP_DIR="$HOME/.${BACKUP_NAME}-temp-$TIMESTAMP"
BACKUP_ZIP="$HOME/${BACKUP_NAME}-$TIMESTAMP.zip"

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Main backup function
main() {
    log_info "Starting comprehensive dotfiles backup..."
    
    # Create temporary backup directory
    mkdir -p "$BACKUP_DIR"
    
    # Backup all rc and profile files
    log_info "Backing up shell configuration files..."
    for file in $HOME/.*rc $HOME/.*profile $HOME/.*_profile; do
        if [[ -f "$file" && ! -L "$file" ]]; then
            filename=$(basename "$file")
            cp "$file" "$BACKUP_DIR/$filename"
            log_info "  - $filename"
        fi
    done
    
    # Backup .config directory
    if [[ -d "$HOME/.config" ]]; then
        log_info "Backing up .config directory..."
        mkdir -p "$BACKUP_DIR/.config"
        # Copy each subdirectory to avoid permission issues
        for dir in "$HOME/.config"/*; do
            if [[ -d "$dir" ]]; then
                dirname=$(basename "$dir")
                cp -r "$dir" "$BACKUP_DIR/.config/$dirname" 2>/dev/null || log_warn "  - Skipped $dirname (permission denied)"
            fi
        done
    fi
    
    # Backup other important dotfiles and directories
    log_info "Backing up other configuration files..."
    for item in .gitconfig .gitignore_global .tmux.conf .tmux .ssh/config .gnupg .aws/config .kube/config; do
        if [[ -e "$HOME/$item" ]]; then
            # Create parent directory if needed
            parent_dir=$(dirname "$item")
            if [[ "$parent_dir" != "." ]]; then
                mkdir -p "$BACKUP_DIR/$parent_dir"
            fi
            
            if [[ -d "$HOME/$item" ]]; then
                cp -r "$HOME/$item" "$BACKUP_DIR/$item" 2>/dev/null && log_info "  - $item/"
            else
                cp "$HOME/$item" "$BACKUP_DIR/$item" 2>/dev/null && log_info "  - $item"
            fi
        fi
    done
    
    # Create ZIP archive with maximum compression
    log_info "Creating compressed archive..."
    cd "$HOME"
    zip -r -9 "$BACKUP_ZIP" "$(basename "$BACKUP_DIR")" > /dev/null 2>&1
    
    # Calculate sizes
    BACKUP_SIZE=$(du -h "$BACKUP_ZIP" | cut -f1)
    ORIGINAL_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
    
    # Remove temporary directory
    rm -rf "$BACKUP_DIR"
    
    # Summary
    echo ""
    log_info "Backup completed successfully!"
    echo -e "${GREEN}=======================================${NC}"
    echo -e "  Archive: ${YELLOW}$BACKUP_ZIP${NC}"
    echo -e "  Size: ${YELLOW}$BACKUP_SIZE${NC} (original: $ORIGINAL_SIZE)"
    echo -e "  Time: ${YELLOW}$(date)${NC}"
    echo -e "${GREEN}=======================================${NC}"
    echo ""
    log_info "To restore from this backup:"
    echo "  unzip $BACKUP_ZIP"
    echo "  cd $(basename "$BACKUP_DIR")"
    echo "  cp -r * ~/"
}

# Run backup
main "$@"